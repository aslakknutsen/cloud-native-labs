{
    "v": "4.0",
    "name": "debugging-microservices",
    "workspace": {
      "defaultEnv": "default",
      "environments": {
        "default": {
          "machines": {
            "dev-machine": {
              "attributes": {
                "memoryLimitBytes": "4294967296"
              },
              "servers": {},
              "volumes": {},
              "installers": [
                "org.eclipse.che.exec",
                "org.eclipse.che.terminal",
                "org.eclipse.che.ws-agent",
                "org.eclipse.che.ls.java"
              ],
              "env": {
                "MAVEN_OPTS": "-Xmx512m",
                "MAVEN_MIRROR_URL": "http://nexus.opentlc-shared.svc:8081/repository/maven-all-public",
                "OPENSHIFT_API_URL": "https://api.cluster-3ea4.3ea4.events.opentlc.com"
              }
            }
          },
          "recipe": {
            "type": "dockerimage",
            "content": "image-registry.openshift-image-registry.svc:5000/openshift/che-cloud-native:ocp4"
          }
        }
      },
      "projects": [
        {
          "links": [],
          "name": "labs",
          "attributes": {},
          "type": "blank",
          "source": {
            "location": "https://github.com/mcouliba/cloud-native-labs/archive/debugging.zip",
            "type": "zip",
            "parameters": {
              "skipFirstLevel": "true"
            }
          },
          "path": "/labs",
          "problems": [],
          "mixins": []
        },
        {
          "links": [],
          "name": "gateway-vertx",
          "attributes": {},
          "type": "maven",
          "source": {
            "parameters": {}
          },
          "path": "/labs/gateway-vertx",
          "problems": [],
          "mixins": []
        },
        {
          "links": [],
          "name": "inventory-thorntail",
          "attributes": {},
          "type": "maven",
          "source": {
            "parameters": {}
          },
          "path": "/labs/inventory-thorntail",
          "problems": [],
          "mixins": []
        },
        {
          "links": [],
          "name": "cart-quarkus",
          "attributes": {},
          "type": "maven",
          "source": {
            "parameters": {}
          },
          "path": "/labs/cart-quarkus",
          "problems": [],
          "mixins": []
        },
        {
          "links": [],
          "name": "catalog-spring-boot",
          "attributes": {},
          "type": "maven",
          "source": {
            "parameters": {}
          },
          "path": "/labs/catalog-spring-boot",
          "problems": [],
          "mixins": []
        }
      ],
      "name": "wksp-debugging",
      "attributes": {},
      "commands": [
        {
          "commandLine": "username=${workspace.namespace}\nprojectname=coolstore${username#user}\noc login ${OPENSHIFT_API_URL} -u ${username} -p 'openshift' --insecure-skip-tls-verify\noc project ${projectname}\necho \"-----------\"\necho \"Successful Connected to OpenShift as ${username}\"\necho \"-----------\"",
          "name": "oc login",
          "attributes": {
            "goal": "OpenShift"
          },
          "type": "custom"
        },
        {
          "commandLine": "echo \"Squash version used from Solo.io\" && \\\nsquashctl --version",
          "name": "Squash Version",
          "attributes": {
            "goal": "Debug"
          },
          "type": "custom"
        },
        {
          "commandLine": "oc start-build inventory-s2i --from-dir /projects/labs/inventory-thorntail/ --follow ",
          "name": "Build Inventory Service",
          "attributes": {
            "goal": "Build"
          },
          "type": "custom"
        },
        {
          "commandLine": "oc new-app /projects/labs/ --strategy=docker --context-dir=catalog-go --name=catalog-v2 --labels app=catalog,group=com.redhat.cloudnative,provider=fabric8,version=2.0 && \\\noc start-build catalog-v2 --from-dir /projects/labs/catalog-go/ --follow && \\\noc patch dc/catalog-v2 --patch '{\"spec\": {\"template\": {\"metadata\": {\"annotations\": {\"sidecar.istio.io/inject\": \"true\"}}}}}' && \\\necho \"Catalog V2 in Go Language and Integration of Istio Sidecar\"",
          "name": "Option: Catalog V2  in Go",
          "attributes": {
            "goal": "Build"
          },
          "type": "custom"
        },
        {
          "commandLine": "username=${workspace.namespace}\nprojectname=coolstore${username#user}\noc process -f https://raw.githubusercontent.com/dwojciec/debugging-lab-summit-2019/master/openshift/coolstore.yml -p COOLSTORE_PROJECT=${projectname} | oc create -f - && \\\noc start-build catalog-s2i --from-dir /projects/labs/catalog-spring-boot/ && \\\noc start-build inventory-s2i --from-dir /projects/labs/inventory-thorntail/ --follow && \\\noc start-build gateway-s2i --from-dir /projects/labs/gateway-vertx/ && \\\noc start-build web --from-dir /projects/labs/web-nodejs/",
          "name": "Build Mysterious Application",
          "attributes": {
            "goal": "Build"
          },
          "type": "custom"
        },
        {
          "commandLine": "username=${workspace.namespace}\nprojectname=coolstore${username#user}\ninfraname=infra${username#user}\necho \"Execute in Terminal Windows\" && \\\necho \"squashctl --namespace ${projectname} --debugger java-port --squash-namespace ${infraname}\"",
          "name": "Debug Squash Inventory",
          "attributes": {
            "goal": "Debug"
          },
          "type": "custom"
        },
        {
          "commandLine": "username=${workspace.namespace}\nprojectname=infra${username#user}\necho \"squashctl utils delete-planks --squash-namespace ${projectname}\"\nsquashctl utils delete-planks --squash-namespace ${projectname}",
          "name": "Delete Squash Attachments",
          "attributes": {
            "goal": "Debug"
          },
          "type": "custom"
        },
        {
          "commandLine": "username=${workspace.namespace}\nproject_name=coolstore${username#user}\nurl=http://istio-ingressgateway.istio-system.svc/${project_name}/api/products\necho \"$url\"\nresponse=$(curl --write-out %{http_code} --silent --output /dev/null $url)\nif [ \"${response}\" == \"200\" ]\nthen\n    while true; do \n        if curl -s ${url} | grep -q OFFICIAL\n        then\n            echo \"Gateway => Catalog GoLang (v2)\";\n        else\n            echo \"Gateway => Catalog Spring Boot (v1)\";\n        fi\n        sleep 1\n    done\nelse\n    echo \"Error ${response} when calling ${url}\";\nfi",
          "name": "testGatewayService",
          "attributes": {
            "goal": "Test",
            "previewUrl": ""
          },
          "type": "custom"
        },
        {
          "commandLine": "username=${workspace.namespace}\nproject_name=coolstore${username#user}\nurl=http://istio-ingressgateway.istio-system.svc/${project_name}/api/products\necho \"$url\"\nresponse=$(curl --write-out %{http_code} --silent --output /dev/null $url)\nif [ \"${response}\" == \"200\" ]\nthen\n    while true; do \n        if curl -s ${url} | grep -q OFFICIAL\n        then\n            echo \"Gateway => Catalog GoLang (v2)\";\n        else\n            echo \"Gateway => Catalog Spring Boot (v1)\";\n        fi\n        sleep 1\n    done\nelse\n    echo \"Error ${response} when calling ${url}\";\nfi",
          "name": "testGatewayService",
          "attributes": {
            "goal": "Test",
            "previewUrl": ""
          },
          "type": "custom"
        },
        {
          "commandLine": "username=${workspace.namespace}\nproject_name=coolstore${username#user}\nurl=http://istio-ingressgateway.istio-system.svc/${project_name}/api/products\necho \"$url\"\nresponse=$(curl --write-out %{http_code} --silent --output /dev/null $url)\nif [ \"${response}\" == \"200\" ]\nthen\n    while true; do \n        if curl -s ${url} | grep -q OFFICIAL\n        then\n            echo \"Gateway => Catalog GoLang (v2)\";\n        else\n            echo \"Gateway => Catalog Spring Boot (v1)\";\n        fi\n        sleep 1\n    done\nelse\n    echo \"Error ${response} when calling ${url}\";\nfi",
          "name": "testGatewayService",
          "attributes": {
            "goal": "Test",
            "previewUrl": ""
          },
          "type": "custom"
        },
        {
          "commandLine": "username=${workspace.namespace}\nproject_name=coolstore${username#user}\nurl=http://web.${project_name}.svc.cluster.local:8080\necho \"$url\"\nresponse=$(curl --write-out %{http_code} --silent --output /dev/null $url)\nif [ \"${response}\" == \"200\" ]\nthen\n    while true; do \n        echo \"Generating traffic\";\n        sleep 1\n    done\nelse\n    echo \"Error ${response} when calling ${url}\";\nfi",
          "name": "generateTraffic",
          "attributes": {
            "goal": "Test",
            "previewUrl": ""
          },
          "type": "custom"
        }
        
      ],
      "links": []
    },
    "creator": {
      "name": "mcouliba",
      "email": "mcouliba@redhat.com",
      "created": 1554319574589
    }
  }  
